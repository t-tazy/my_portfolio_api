// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/t-tazy/my_portfolio_api/entity"
	"sync"
)

// Ensure, that ListExercisesServiceMock does implement ListExercisesService.
// If this is not the case, regenerate this file with moq.
var _ ListExercisesService = &ListExercisesServiceMock{}

// ListExercisesServiceMock is a mock implementation of ListExercisesService.
//
//	func TestSomethingThatUsesListExercisesService(t *testing.T) {
//
//		// make and configure a mocked ListExercisesService
//		mockedListExercisesService := &ListExercisesServiceMock{
//			ListExercisesFunc: func(ctx context.Context) (entity.Exercises, error) {
//				panic("mock out the ListExercises method")
//			},
//		}
//
//		// use mockedListExercisesService in code that requires ListExercisesService
//		// and then make assertions.
//
//	}
type ListExercisesServiceMock struct {
	// ListExercisesFunc mocks the ListExercises method.
	ListExercisesFunc func(ctx context.Context) (entity.Exercises, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListExercises holds details about calls to the ListExercises method.
		ListExercises []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListExercises sync.RWMutex
}

// ListExercises calls ListExercisesFunc.
func (mock *ListExercisesServiceMock) ListExercises(ctx context.Context) (entity.Exercises, error) {
	if mock.ListExercisesFunc == nil {
		panic("ListExercisesServiceMock.ListExercisesFunc: method is nil but ListExercisesService.ListExercises was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListExercises.Lock()
	mock.calls.ListExercises = append(mock.calls.ListExercises, callInfo)
	mock.lockListExercises.Unlock()
	return mock.ListExercisesFunc(ctx)
}

// ListExercisesCalls gets all the calls that were made to ListExercises.
// Check the length with:
//
//	len(mockedListExercisesService.ListExercisesCalls())
func (mock *ListExercisesServiceMock) ListExercisesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListExercises.RLock()
	calls = mock.calls.ListExercises
	mock.lockListExercises.RUnlock()
	return calls
}

// Ensure, that AddExerciseServiceMock does implement AddExerciseService.
// If this is not the case, regenerate this file with moq.
var _ AddExerciseService = &AddExerciseServiceMock{}

// AddExerciseServiceMock is a mock implementation of AddExerciseService.
//
//	func TestSomethingThatUsesAddExerciseService(t *testing.T) {
//
//		// make and configure a mocked AddExerciseService
//		mockedAddExerciseService := &AddExerciseServiceMock{
//			AddExerciseFunc: func(ctx context.Context, title string, description string) (*entity.Exercise, error) {
//				panic("mock out the AddExercise method")
//			},
//		}
//
//		// use mockedAddExerciseService in code that requires AddExerciseService
//		// and then make assertions.
//
//	}
type AddExerciseServiceMock struct {
	// AddExerciseFunc mocks the AddExercise method.
	AddExerciseFunc func(ctx context.Context, title string, description string) (*entity.Exercise, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddExercise holds details about calls to the AddExercise method.
		AddExercise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
			// Description is the description argument value.
			Description string
		}
	}
	lockAddExercise sync.RWMutex
}

// AddExercise calls AddExerciseFunc.
func (mock *AddExerciseServiceMock) AddExercise(ctx context.Context, title string, description string) (*entity.Exercise, error) {
	if mock.AddExerciseFunc == nil {
		panic("AddExerciseServiceMock.AddExerciseFunc: method is nil but AddExerciseService.AddExercise was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Title       string
		Description string
	}{
		Ctx:         ctx,
		Title:       title,
		Description: description,
	}
	mock.lockAddExercise.Lock()
	mock.calls.AddExercise = append(mock.calls.AddExercise, callInfo)
	mock.lockAddExercise.Unlock()
	return mock.AddExerciseFunc(ctx, title, description)
}

// AddExerciseCalls gets all the calls that were made to AddExercise.
// Check the length with:
//
//	len(mockedAddExerciseService.AddExerciseCalls())
func (mock *AddExerciseServiceMock) AddExerciseCalls() []struct {
	Ctx         context.Context
	Title       string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Title       string
		Description string
	}
	mock.lockAddExercise.RLock()
	calls = mock.calls.AddExercise
	mock.lockAddExercise.RUnlock()
	return calls
}

// Ensure, that GetExerciseServiceMock does implement GetExerciseService.
// If this is not the case, regenerate this file with moq.
var _ GetExerciseService = &GetExerciseServiceMock{}

// GetExerciseServiceMock is a mock implementation of GetExerciseService.
//
//	func TestSomethingThatUsesGetExerciseService(t *testing.T) {
//
//		// make and configure a mocked GetExerciseService
//		mockedGetExerciseService := &GetExerciseServiceMock{
//			GetExerciseFunc: func(ctx context.Context, id entity.ExerciseID) (*entity.Exercise, error) {
//				panic("mock out the GetExercise method")
//			},
//		}
//
//		// use mockedGetExerciseService in code that requires GetExerciseService
//		// and then make assertions.
//
//	}
type GetExerciseServiceMock struct {
	// GetExerciseFunc mocks the GetExercise method.
	GetExerciseFunc func(ctx context.Context, id entity.ExerciseID) (*entity.Exercise, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetExercise holds details about calls to the GetExercise method.
		GetExercise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID entity.ExerciseID
		}
	}
	lockGetExercise sync.RWMutex
}

// GetExercise calls GetExerciseFunc.
func (mock *GetExerciseServiceMock) GetExercise(ctx context.Context, id entity.ExerciseID) (*entity.Exercise, error) {
	if mock.GetExerciseFunc == nil {
		panic("GetExerciseServiceMock.GetExerciseFunc: method is nil but GetExerciseService.GetExercise was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  entity.ExerciseID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetExercise.Lock()
	mock.calls.GetExercise = append(mock.calls.GetExercise, callInfo)
	mock.lockGetExercise.Unlock()
	return mock.GetExerciseFunc(ctx, id)
}

// GetExerciseCalls gets all the calls that were made to GetExercise.
// Check the length with:
//
//	len(mockedGetExerciseService.GetExerciseCalls())
func (mock *GetExerciseServiceMock) GetExerciseCalls() []struct {
	Ctx context.Context
	ID  entity.ExerciseID
} {
	var calls []struct {
		Ctx context.Context
		ID  entity.ExerciseID
	}
	mock.lockGetExercise.RLock()
	calls = mock.calls.GetExercise
	mock.lockGetExercise.RUnlock()
	return calls
}

// Ensure, that DeleteExerciseServiceMock does implement DeleteExerciseService.
// If this is not the case, regenerate this file with moq.
var _ DeleteExerciseService = &DeleteExerciseServiceMock{}

// DeleteExerciseServiceMock is a mock implementation of DeleteExerciseService.
//
//	func TestSomethingThatUsesDeleteExerciseService(t *testing.T) {
//
//		// make and configure a mocked DeleteExerciseService
//		mockedDeleteExerciseService := &DeleteExerciseServiceMock{
//			DeleteExerciseFunc: func(ctx context.Context, id entity.ExerciseID) error {
//				panic("mock out the DeleteExercise method")
//			},
//		}
//
//		// use mockedDeleteExerciseService in code that requires DeleteExerciseService
//		// and then make assertions.
//
//	}
type DeleteExerciseServiceMock struct {
	// DeleteExerciseFunc mocks the DeleteExercise method.
	DeleteExerciseFunc func(ctx context.Context, id entity.ExerciseID) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteExercise holds details about calls to the DeleteExercise method.
		DeleteExercise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID entity.ExerciseID
		}
	}
	lockDeleteExercise sync.RWMutex
}

// DeleteExercise calls DeleteExerciseFunc.
func (mock *DeleteExerciseServiceMock) DeleteExercise(ctx context.Context, id entity.ExerciseID) error {
	if mock.DeleteExerciseFunc == nil {
		panic("DeleteExerciseServiceMock.DeleteExerciseFunc: method is nil but DeleteExerciseService.DeleteExercise was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  entity.ExerciseID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteExercise.Lock()
	mock.calls.DeleteExercise = append(mock.calls.DeleteExercise, callInfo)
	mock.lockDeleteExercise.Unlock()
	return mock.DeleteExerciseFunc(ctx, id)
}

// DeleteExerciseCalls gets all the calls that were made to DeleteExercise.
// Check the length with:
//
//	len(mockedDeleteExerciseService.DeleteExerciseCalls())
func (mock *DeleteExerciseServiceMock) DeleteExerciseCalls() []struct {
	Ctx context.Context
	ID  entity.ExerciseID
} {
	var calls []struct {
		Ctx context.Context
		ID  entity.ExerciseID
	}
	mock.lockDeleteExercise.RLock()
	calls = mock.calls.DeleteExercise
	mock.lockDeleteExercise.RUnlock()
	return calls
}

// Ensure, that UpdateExerciseServiceMock does implement UpdateExerciseService.
// If this is not the case, regenerate this file with moq.
var _ UpdateExerciseService = &UpdateExerciseServiceMock{}

// UpdateExerciseServiceMock is a mock implementation of UpdateExerciseService.
//
//	func TestSomethingThatUsesUpdateExerciseService(t *testing.T) {
//
//		// make and configure a mocked UpdateExerciseService
//		mockedUpdateExerciseService := &UpdateExerciseServiceMock{
//			UpdateExerciseFunc: func(ctx context.Context, id entity.ExerciseID, title string, description string) error {
//				panic("mock out the UpdateExercise method")
//			},
//		}
//
//		// use mockedUpdateExerciseService in code that requires UpdateExerciseService
//		// and then make assertions.
//
//	}
type UpdateExerciseServiceMock struct {
	// UpdateExerciseFunc mocks the UpdateExercise method.
	UpdateExerciseFunc func(ctx context.Context, id entity.ExerciseID, title string, description string) error

	// calls tracks calls to the methods.
	calls struct {
		// UpdateExercise holds details about calls to the UpdateExercise method.
		UpdateExercise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID entity.ExerciseID
			// Title is the title argument value.
			Title string
			// Description is the description argument value.
			Description string
		}
	}
	lockUpdateExercise sync.RWMutex
}

// UpdateExercise calls UpdateExerciseFunc.
func (mock *UpdateExerciseServiceMock) UpdateExercise(ctx context.Context, id entity.ExerciseID, title string, description string) error {
	if mock.UpdateExerciseFunc == nil {
		panic("UpdateExerciseServiceMock.UpdateExerciseFunc: method is nil but UpdateExerciseService.UpdateExercise was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          entity.ExerciseID
		Title       string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Title:       title,
		Description: description,
	}
	mock.lockUpdateExercise.Lock()
	mock.calls.UpdateExercise = append(mock.calls.UpdateExercise, callInfo)
	mock.lockUpdateExercise.Unlock()
	return mock.UpdateExerciseFunc(ctx, id, title, description)
}

// UpdateExerciseCalls gets all the calls that were made to UpdateExercise.
// Check the length with:
//
//	len(mockedUpdateExerciseService.UpdateExerciseCalls())
func (mock *UpdateExerciseServiceMock) UpdateExerciseCalls() []struct {
	Ctx         context.Context
	ID          entity.ExerciseID
	Title       string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          entity.ExerciseID
		Title       string
		Description string
	}
	mock.lockUpdateExercise.RLock()
	calls = mock.calls.UpdateExercise
	mock.lockUpdateExercise.RUnlock()
	return calls
}

// Ensure, that RegisterUserServiceMock does implement RegisterUserService.
// If this is not the case, regenerate this file with moq.
var _ RegisterUserService = &RegisterUserServiceMock{}

// RegisterUserServiceMock is a mock implementation of RegisterUserService.
//
//	func TestSomethingThatUsesRegisterUserService(t *testing.T) {
//
//		// make and configure a mocked RegisterUserService
//		mockedRegisterUserService := &RegisterUserServiceMock{
//			RegisterUserFunc: func(ctx context.Context, name string, password string, role string) (*entity.User, error) {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedRegisterUserService in code that requires RegisterUserService
//		// and then make assertions.
//
//	}
type RegisterUserServiceMock struct {
	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, name string, password string, role string) (*entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Password is the password argument value.
			Password string
			// Role is the role argument value.
			Role string
		}
	}
	lockRegisterUser sync.RWMutex
}

// RegisterUser calls RegisterUserFunc.
func (mock *RegisterUserServiceMock) RegisterUser(ctx context.Context, name string, password string, role string) (*entity.User, error) {
	if mock.RegisterUserFunc == nil {
		panic("RegisterUserServiceMock.RegisterUserFunc: method is nil but RegisterUserService.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Name     string
		Password string
		Role     string
	}{
		Ctx:      ctx,
		Name:     name,
		Password: password,
		Role:     role,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, name, password, role)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedRegisterUserService.RegisterUserCalls())
func (mock *RegisterUserServiceMock) RegisterUserCalls() []struct {
	Ctx      context.Context
	Name     string
	Password string
	Role     string
} {
	var calls []struct {
		Ctx      context.Context
		Name     string
		Password string
		Role     string
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}

// Ensure, that LoginServiceMock does implement LoginService.
// If this is not the case, regenerate this file with moq.
var _ LoginService = &LoginServiceMock{}

// LoginServiceMock is a mock implementation of LoginService.
//
//	func TestSomethingThatUsesLoginService(t *testing.T) {
//
//		// make and configure a mocked LoginService
//		mockedLoginService := &LoginServiceMock{
//			LoginFunc: func(ctx context.Context, name string, pw string) (string, error) {
//				panic("mock out the Login method")
//			},
//		}
//
//		// use mockedLoginService in code that requires LoginService
//		// and then make assertions.
//
//	}
type LoginServiceMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, name string, pw string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Pw is the pw argument value.
			Pw string
		}
	}
	lockLogin sync.RWMutex
}

// Login calls LoginFunc.
func (mock *LoginServiceMock) Login(ctx context.Context, name string, pw string) (string, error) {
	if mock.LoginFunc == nil {
		panic("LoginServiceMock.LoginFunc: method is nil but LoginService.Login was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Pw   string
	}{
		Ctx:  ctx,
		Name: name,
		Pw:   pw,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, name, pw)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedLoginService.LoginCalls())
func (mock *LoginServiceMock) LoginCalls() []struct {
	Ctx  context.Context
	Name string
	Pw   string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Pw   string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}
