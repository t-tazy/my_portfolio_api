// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/t-tazy/my_portfolio_api/entity"
	"sync"
)

// Ensure, that ListExercisesServiceMock does implement ListExercisesService.
// If this is not the case, regenerate this file with moq.
var _ ListExercisesService = &ListExercisesServiceMock{}

// ListExercisesServiceMock is a mock implementation of ListExercisesService.
//
//	func TestSomethingThatUsesListExercisesService(t *testing.T) {
//
//		// make and configure a mocked ListExercisesService
//		mockedListExercisesService := &ListExercisesServiceMock{
//			ListExercisesFunc: func(ctx context.Context) (entity.Exercises, error) {
//				panic("mock out the ListExercises method")
//			},
//		}
//
//		// use mockedListExercisesService in code that requires ListExercisesService
//		// and then make assertions.
//
//	}
type ListExercisesServiceMock struct {
	// ListExercisesFunc mocks the ListExercises method.
	ListExercisesFunc func(ctx context.Context) (entity.Exercises, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListExercises holds details about calls to the ListExercises method.
		ListExercises []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListExercises sync.RWMutex
}

// ListExercises calls ListExercisesFunc.
func (mock *ListExercisesServiceMock) ListExercises(ctx context.Context) (entity.Exercises, error) {
	if mock.ListExercisesFunc == nil {
		panic("ListExercisesServiceMock.ListExercisesFunc: method is nil but ListExercisesService.ListExercises was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListExercises.Lock()
	mock.calls.ListExercises = append(mock.calls.ListExercises, callInfo)
	mock.lockListExercises.Unlock()
	return mock.ListExercisesFunc(ctx)
}

// ListExercisesCalls gets all the calls that were made to ListExercises.
// Check the length with:
//
//	len(mockedListExercisesService.ListExercisesCalls())
func (mock *ListExercisesServiceMock) ListExercisesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListExercises.RLock()
	calls = mock.calls.ListExercises
	mock.lockListExercises.RUnlock()
	return calls
}

// Ensure, that AddExerciseServiceMock does implement AddExerciseService.
// If this is not the case, regenerate this file with moq.
var _ AddExerciseService = &AddExerciseServiceMock{}

// AddExerciseServiceMock is a mock implementation of AddExerciseService.
//
//	func TestSomethingThatUsesAddExerciseService(t *testing.T) {
//
//		// make and configure a mocked AddExerciseService
//		mockedAddExerciseService := &AddExerciseServiceMock{
//			AddExerciseFunc: func(ctx context.Context, title string, description string) (*entity.Exercise, error) {
//				panic("mock out the AddExercise method")
//			},
//		}
//
//		// use mockedAddExerciseService in code that requires AddExerciseService
//		// and then make assertions.
//
//	}
type AddExerciseServiceMock struct {
	// AddExerciseFunc mocks the AddExercise method.
	AddExerciseFunc func(ctx context.Context, title string, description string) (*entity.Exercise, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddExercise holds details about calls to the AddExercise method.
		AddExercise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
			// Description is the description argument value.
			Description string
		}
	}
	lockAddExercise sync.RWMutex
}

// AddExercise calls AddExerciseFunc.
func (mock *AddExerciseServiceMock) AddExercise(ctx context.Context, title string, description string) (*entity.Exercise, error) {
	if mock.AddExerciseFunc == nil {
		panic("AddExerciseServiceMock.AddExerciseFunc: method is nil but AddExerciseService.AddExercise was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Title       string
		Description string
	}{
		Ctx:         ctx,
		Title:       title,
		Description: description,
	}
	mock.lockAddExercise.Lock()
	mock.calls.AddExercise = append(mock.calls.AddExercise, callInfo)
	mock.lockAddExercise.Unlock()
	return mock.AddExerciseFunc(ctx, title, description)
}

// AddExerciseCalls gets all the calls that were made to AddExercise.
// Check the length with:
//
//	len(mockedAddExerciseService.AddExerciseCalls())
func (mock *AddExerciseServiceMock) AddExerciseCalls() []struct {
	Ctx         context.Context
	Title       string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Title       string
		Description string
	}
	mock.lockAddExercise.RLock()
	calls = mock.calls.AddExercise
	mock.lockAddExercise.RUnlock()
	return calls
}
